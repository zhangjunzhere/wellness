package com.asus.wellness.dbhelper;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.asus.wellness.dbhelper.CoachItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table coach_item.
*/
public class CoachItemDao extends AbstractDao<CoachItem, Long> {

    public static final String TABLENAME = "coach_item";

    /**
     * Properties of entity CoachItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Coach_id = new Property(0, long.class, "coach_id", false, "coach_id");
        public final static Property Start = new Property(1, long.class, "start", true, "start");
        public final static Property End = new Property(2, Long.class, "end", false, "end");
        public final static Property Value = new Property(3, Long.class, "value", false, "value");
    };

    private Query<CoachItem> coach_ItemsQuery;

    public CoachItemDao(DaoConfig config) {
        super(config);
    }
    
    public CoachItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'coach_item' (" + //
                "'coach_id' INTEGER NOT NULL ," + // 0: coach_id
                "'start' INTEGER PRIMARY KEY NOT NULL ," + // 1: start
                "'end' INTEGER," + // 2: end
                "'value' INTEGER);"); // 3: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'coach_item'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CoachItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCoach_id());
        stmt.bindLong(2, entity.getStart());
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(3, end);
        }
 
        Long value = entity.getValue();
        if (value != null) {
            stmt.bindLong(4, value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public CoachItem readEntity(Cursor cursor, int offset) {
        CoachItem entity = new CoachItem( //
            cursor.getLong(offset + 0), // coach_id
            cursor.getLong(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // end
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CoachItem entity, int offset) {
        entity.setCoach_id(cursor.getLong(offset + 0));
        entity.setStart(cursor.getLong(offset + 1));
        entity.setEnd(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CoachItem entity, long rowId) {
        entity.setStart(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CoachItem entity) {
        if(entity != null) {
            return entity.getStart();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of Coach. */
    public List<CoachItem> _queryCoach_Items(long coach_id) {
        synchronized (this) {
            if (coach_ItemsQuery == null) {
                QueryBuilder<CoachItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Coach_id.eq(null));
                coach_ItemsQuery = queryBuilder.build();
            }
        }
        Query<CoachItem> query = coach_ItemsQuery.forCurrentThread();
        query.setParameter(0, coach_id);
        return query.list();
    }

}

package com.asus.wellness.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.wellness.dbhelper.Activity_status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table activity_status.
*/
public class Activity_statusDao extends AbstractDao<Activity_status, Long> {

    public static final String TABLENAME = "activity_status";

    /**
     * Properties of entity Activity_status.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Step = new Property(1, Long.class, "step", false, "step");
        public final static Property Distance = new Property(2, Long.class, "distance", false, "distance");
        public final static Property Activity_type = new Property(3, Long.class, "activity_type", false, "activity_type");
    };


    public Activity_statusDao(DaoConfig config) {
        super(config);
    }
    
    public Activity_statusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'activity_status' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'step' INTEGER," + // 1: step
                "'distance' INTEGER," + // 2: distance
                "'activity_type' INTEGER);"); // 3: activity_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'activity_status'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Activity_status entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long step = entity.getStep();
        if (step != null) {
            stmt.bindLong(2, step);
        }
 
        Long distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(3, distance);
        }
 
        Long activity_type = entity.getActivity_type();
        if (activity_type != null) {
            stmt.bindLong(4, activity_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Activity_status readEntity(Cursor cursor, int offset) {
        Activity_status entity = new Activity_status( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // step
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // distance
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // activity_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Activity_status entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStep(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDistance(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setActivity_type(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Activity_status entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Activity_status entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

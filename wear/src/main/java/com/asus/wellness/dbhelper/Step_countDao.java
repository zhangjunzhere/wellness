package com.asus.wellness.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.wellness.dbhelper.Step_count;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table step_count.
*/
public class Step_countDao extends AbstractDao<Step_count, Long> {

    public static final String TABLENAME = "step_count";

    /**
     * Properties of entity Step_count.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Start = new Property(1, Long.class, "start", false, "start");
        public final static Property End = new Property(2, Long.class, "end", false, "end");
        public final static Property Step_count = new Property(3, Long.class, "step_count", false, "step_count");
        public final static Property Sensor_value = new Property(4, Long.class, "sensor_value", false, "sensor_value");
    };


    public Step_countDao(DaoConfig config) {
        super(config);
    }
    
    public Step_countDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'step_count' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'start' INTEGER," + // 1: start
                "'end' INTEGER," + // 2: end
                "'step_count' INTEGER," + // 3: step_count
                "'sensor_value' INTEGER);"); // 4: sensor_value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'step_count'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Step_count entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(2, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(3, end);
        }
 
        Long step_count = entity.getStep_count();
        if (step_count != null) {
            stmt.bindLong(4, step_count);
        }
 
        Long sensor_value = entity.getSensor_value();
        if (sensor_value != null) {
            stmt.bindLong(5, sensor_value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Step_count readEntity(Cursor cursor, int offset) {
        Step_count entity = new Step_count( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // end
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // step_count
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // sensor_value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Step_count entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEnd(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStep_count(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSensor_value(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Step_count entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Step_count entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

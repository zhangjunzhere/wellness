package com.asus.wellness.dbhelper;

import com.asus.wellness.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ecg.
 */
public class Ecg {

    private Long id;
    private Long measure_time;
    private Long measure_value;
    private Long measure_type;
    private String measure_comment;
    private Long deviceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EcgDao myDao;

    private Device device;
    private Long device__resolvedKey;


    public Ecg() {
    }

    public Ecg(Long id) {
        this.id = id;
    }

    public Ecg(Long id, Long measure_time, Long measure_value, Long measure_type, String measure_comment, Long deviceId) {
        this.id = id;
        this.measure_time = measure_time;
        this.measure_value = measure_value;
        this.measure_type = measure_type;
        this.measure_comment = measure_comment;
        this.deviceId = deviceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEcgDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMeasure_time() {
        return measure_time;
    }

    public void setMeasure_time(Long measure_time) {
        this.measure_time = measure_time;
    }

    public Long getMeasure_value() {
        return measure_value;
    }

    public void setMeasure_value(Long measure_value) {
        this.measure_value = measure_value;
    }

    public Long getMeasure_type() {
        return measure_type;
    }

    public void setMeasure_type(Long measure_type) {
        this.measure_type = measure_type;
    }

    public String getMeasure_comment() {
        return measure_comment;
    }

    public void setMeasure_comment(String measure_comment) {
        this.measure_comment = measure_comment;
    }

    public Long getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(Long deviceId) {
        this.deviceId = deviceId;
    }

    /** To-one relationship, resolved on first access. */
    public Device getDevice() {
        Long __key = this.deviceId;
        if (device__resolvedKey == null || !device__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeviceDao targetDao = daoSession.getDeviceDao();
            Device deviceNew = targetDao.load(__key);
            synchronized (this) {
                device = deviceNew;
            	device__resolvedKey = __key;
            }
        }
        return device;
    }

    public void setDevice(Device device) {
        synchronized (this) {
            this.device = device;
            deviceId = device == null ? null : device.getId();
            device__resolvedKey = deviceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package com.asus.wellness.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.wellness.dbhelper.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table device.
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "device";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Blueaddr = new Property(2, String.class, "blueaddr", false, "blueaddr");
        public final static Property IsRobin = new Property(3, Boolean.class, "isRobin", false, "isrobin");
        public final static Property Lastconnecttime = new Property(4, Long.class, "lastconnecttime", false, "lastconnecttime");
        public final static Property Stepsynctime = new Property(5, Long.class, "stepsynctime", false, "stepsynctime");
        public final static Property Ecgsynctime = new Property(6, Long.class, "ecgsynctime", false, "ecgsynctime");
    };


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'device' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'name' TEXT," + // 1: name
                "'blueaddr' TEXT," + // 2: blueaddr
                "'isrobin' INTEGER," + // 3: isRobin
                "'lastconnecttime' INTEGER," + // 4: lastconnecttime
                "'stepsynctime' INTEGER," + // 5: stepsynctime
                "'ecgsynctime' INTEGER);"); // 6: ecgsynctime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'device'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String blueaddr = entity.getBlueaddr();
        if (blueaddr != null) {
            stmt.bindString(3, blueaddr);
        }
 
        Boolean isRobin = entity.getIsRobin();
        if (isRobin != null) {
            stmt.bindLong(4, isRobin ? 1l: 0l);
        }
 
        Long lastconnecttime = entity.getLastconnecttime();
        if (lastconnecttime != null) {
            stmt.bindLong(5, lastconnecttime);
        }
 
        Long stepsynctime = entity.getStepsynctime();
        if (stepsynctime != null) {
            stmt.bindLong(6, stepsynctime);
        }
 
        Long ecgsynctime = entity.getEcgsynctime();
        if (ecgsynctime != null) {
            stmt.bindLong(7, ecgsynctime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // blueaddr
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isRobin
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lastconnecttime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // stepsynctime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // ecgsynctime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBlueaddr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsRobin(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setLastconnecttime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setStepsynctime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEcgsynctime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

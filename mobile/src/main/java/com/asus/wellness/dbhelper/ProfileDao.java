package com.asus.wellness.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.wellness.dbhelper.Profile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table profile.
*/
public class ProfileDao extends AbstractDao<Profile, Long> {

    public static final String TABLENAME = "profile";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Photo_path = new Property(2, String.class, "photo_path", false, "photo_path");
        public final static Property Age = new Property(3, Integer.class, "age", false, "age");
        public final static Property Gender = new Property(4, Integer.class, "gender", false, "gender");
        public final static Property Height = new Property(5, Integer.class, "height", false, "height");
        public final static Property Height_unit = new Property(6, Integer.class, "height_unit", false, "height_unit");
        public final static Property Weight = new Property(7, Integer.class, "weight", false, "weight");
        public final static Property Weight_unit = new Property(8, Integer.class, "weight_unit", false, "weight_unit");
        public final static Property Start_time = new Property(9, Long.class, "start_time", false, "start_time");
        public final static Property Distance_unit = new Property(10, Integer.class, "distance_unit", false, "distance_unit");
        public final static Property Birthday = new Property(11, Long.class, "birthday", false, "birthday");
    };


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'profile' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'name' TEXT," + // 1: name
                "'photo_path' TEXT," + // 2: photo_path
                "'age' INTEGER," + // 3: age
                "'gender' INTEGER," + // 4: gender
                "'height' INTEGER," + // 5: height
                "'height_unit' INTEGER," + // 6: height_unit
                "'weight' INTEGER," + // 7: weight
                "'weight_unit' INTEGER," + // 8: weight_unit
                "'start_time' INTEGER," + // 9: start_time
                "'distance_unit' INTEGER," + // 10: distance_unit
                "'birthday' INTEGER);"); // 11: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'profile'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String photo_path = entity.getPhoto_path();
        if (photo_path != null) {
            stmt.bindString(3, photo_path);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(5, gender);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        Integer height_unit = entity.getHeight_unit();
        if (height_unit != null) {
            stmt.bindLong(7, height_unit);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(8, weight);
        }
 
        Integer weight_unit = entity.getWeight_unit();
        if (weight_unit != null) {
            stmt.bindLong(9, weight_unit);
        }
 
        Long start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(10, start_time);
        }
 
        Integer distance_unit = entity.getDistance_unit();
        if (distance_unit != null) {
            stmt.bindLong(11, distance_unit);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photo_path
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // height_unit
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // weight
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // weight_unit
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // start_time
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // distance_unit
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // birthday
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoto_path(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHeight_unit(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWeight(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWeight_unit(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStart_time(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDistance_unit(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBirthday(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Profile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Profile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

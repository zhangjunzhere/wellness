package com.asus.wellness.dbhelper;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.wellness.dbhelper.Coach;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table coach.
*/
public class CoachDao extends AbstractDao<Coach, Long> {

    public static final String TABLENAME = "coach";

    /**
     * Properties of entity Coach.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Start = new Property(1, Long.class, "start", false, "start");
        public final static Property End = new Property(2, Long.class, "end", false, "end");
        public final static Property Duration = new Property(3, long.class, "duration", false, "duration");
        public final static Property Value = new Property(4, Long.class, "value", false, "value");
        public final static Property Percent = new Property(5, Integer.class, "percent", false, "percent");
        public final static Property Type = new Property(6, Long.class, "type", false, "type");
        public final static Property DeviceId = new Property(7, Long.class, "deviceId", false, "deviceId");
    };

    private DaoSession daoSession;


    public CoachDao(DaoConfig config) {
        super(config);
    }
    
    public CoachDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'coach' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'start' INTEGER," + // 1: start
                "'end' INTEGER," + // 2: end
                "'duration' INTEGER NOT NULL ," + // 3: duration
                "'value' INTEGER," + // 4: value
                "'percent' INTEGER," + // 5: percent
                "'type' INTEGER," + // 6: type
                "'deviceId' INTEGER);"); // 7: deviceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'coach'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coach entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(2, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(3, end);
        }
        stmt.bindLong(4, entity.getDuration());
 
        Long value = entity.getValue();
        if (value != null) {
            stmt.bindLong(5, value);
        }
 
        Integer percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(6, percent);
        }
 
        Long type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(8, deviceId);
        }
    }

    @Override
    protected void attachEntity(Coach entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Coach readEntity(Cursor cursor, int offset) {
        Coach entity = new Coach( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // end
            cursor.getLong(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // value
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // percent
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // deviceId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coach entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEnd(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDuration(cursor.getLong(offset + 3));
        entity.setValue(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPercent(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDeviceId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Coach entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Coach entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDeviceDao().getAllColumns());
            builder.append(" FROM coach T");
            builder.append(" LEFT JOIN device T0 ON T.'deviceId'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Coach loadCurrentDeep(Cursor cursor, boolean lock) {
        Coach entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Device device = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
        entity.setDevice(device);

        return entity;    
    }

    public Coach loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Coach> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Coach> list = new ArrayList<Coach>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Coach> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Coach> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
